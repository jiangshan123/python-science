-- restructure it all:

   after basic introduction class, have students run through ipython
   notebooks before class, and then in class, have a workbook that we
   will fill in together, interactively




-- Machine learning: http://www.toptal.com/machine-learning/machine-learning-theory-an-introductory-primer


-- post an "assignment" of tasks after each class to the discussion forum.

-- try git:

   https://try.github.io/levels/1/challenges/1

-- python in HPC:

    https://github.com/pyhpc/pyhpc-tutorial

-- new-style classes:

   http://python-history.blogspot.com/2010/06/new-style-classes.html
   

-- decorators: http://thecodeship.com/patterns/guide-to-python-function-decorators/

-- use project Euler for in-class code projects

-- piazza or freeforums.org  -- open discussion forum

-- tedEd -- exercises embedded in lectures

-- jiffylab -- set up a teaching environemtn 
   or ipython chrome app (colaboration ?)

-- do the codeacademy python track outside of class?

-- Stanford NIFTY: computer science projects for students

-- ipython widgets

-- wakari: host a notebook

-- plot.ly

-- coLaboratory Notebooks

  -- available in the Chrome store

-- pythran?

-- nbdiff

-- mpld3 -- interactive matplotlib in ipython notebook

-- "seven ways to think like the web"

-- have a lecture at the start on "mananging projects with git, github, pull 
   requests


-- debugger: from Nathan on yt:

   "The easiest way to debug issues like this is to use a python
   debugger. I prefer ipdb, which has nice integration with IPython,
   including tab completions. Others like pudb. There's also pdb,
   which is part of the python standard library.  All of these
   debuggers have a gdb-like command-line interface, allowing printing
   out backtraces, inspecting variables, and stepping through
   code. Both ipdb and pudb can be installed via pip."



 

references:

 -- "Computational Thinking" J M Wing (Communications in the ACM)

 -- Computing 4 Physics: https://github.com/Computing4Physics/C4P



grading:

 -- grading is based on discussion.  Here's a loose metric:

    by posting, I don't mean a "me to" type post, but something
    either demonstrating a problem you don't understand (giving code),
    asking for some detail from the lecture to be explained,
    sharing a neat trick you found

     A: 12 postings to the discussion board (essentially once a week)

        +
 
        a small example showing how you can apply what we've discussed
        in class to your field.

     
     A-:  8 postings to the discussion board

     B+:  5 postings to the discussion board

     B:   2 postings to the discussion board


-- hadoop streaming API: http://www.michael-noll.com/tutorials/writing-an-hadoop-mapreduce-program-in-python/
